<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KMP算法</title>
    <link href="/2025/10/02/KMP%E7%AE%97%E6%B3%95/"/>
    <url>/2025/10/02/KMP%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>我是在完成力扣28题时，才知道KMP算法的。此算法可以在O(n+m)的时间复杂度内，完成字符串匹配，相较于暴力匹配的O(nm)时间复杂度，KMP算法的效率要高很多。<br>因此在这学习并记录一下KMP算法的实现。  </p><h2 id="KMP算法原理"><a href="#KMP算法原理" class="headerlink" title="KMP算法原理"></a>KMP算法原理</h2><p>KMP算法的核心思想是利用已经匹配过的信息，避免重复匹配。<br>当在主字符串中遇到不匹配的字符时，KMP算法不会回溯主字符串，而是利用模式字符串中的部分匹配信息，直接跳过一些字符，从而提高匹配效率。与暴力匹配不同，KMP算法在匹配过程中，不会重复匹配已经匹配过的字符。</p><h3 id="1-暴力匹配"><a href="#1-暴力匹配" class="headerlink" title="1. 暴力匹配"></a><strong>1. 暴力匹配</strong></h3><p>暴力匹配是一种简单的字符串匹配算法，其基本思想是从主字符串的第一个字符开始，与模式字符串的第一个字符进行比较。如果匹配成功，继续比较下一个字符；如果匹配失败，将主字符串的下一个字符作为新的起始位置，重新与模式字符串的第一个字符进行比较。重复这个过程，直到找到匹配的子字符串或主字符串遍历完毕。<br>    下面通过图示来说明暴力匹配的过程：<br>    <img src="/../assets/images/KMP/KMP_1.png" alt="暴力匹配"><br>    <img src="/../assets/images/KMP/KMP_2.png" alt="暴力匹配"><br>    <img src="/../assets/images/KMP/KMP_3.png" alt="暴力匹配"><br>    <img src="/../assets/images/KMP/KMP_4.png" alt="暴力匹配"><br>    <img src="/../assets/images/KMP/KMP_5.png" alt="暴力匹配"><br>这个算法的原理很简单，实现起来也十分容易，但最大的问题在于它的时间复杂度，假如你运气不好，恰好碰到主串和子串都是若干个 A，最后仅跟一个 B 的情况。这个时候算法会很傻地把前面的 A 都比对完，然后发现最后一个字符不匹配，于是跳回下一个字符重新比对，做了不少的无用功。</p><h3 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2. KMP算法"></a><strong>2. KMP算法</strong></h3><p>KMP算法通过预处理模式字符串，构建前缀表（也称为next数组），来记录模式字符串中每个位置的最长相同前后缀的长度。当在主字符串中遇到不匹配的字符时，KMP算法利用前缀表，直接跳过一些字符，不像是暴力匹配那样，重新从主串下一个字符开始。<strong>换句话说，我们不希望递减主串的这个指针，而让它永远向前方移动</strong>，从而避免重复匹配，提高匹配效率。<br><img src="/../assets/images/KMP/KMP_6.png" alt="KMP算法"><br><img src="/../assets/images/KMP/KMP_7.png" alt="KMP算法"><br><img src="/../assets/images/KMP/KMP_8.png" alt="KMP算法"></p><h2 id="KMP算法步骤"><a href="#KMP算法步骤" class="headerlink" title="KMP算法步骤"></a>KMP算法步骤</h2><h3 id="1-构建部分匹配表（next数组）："><a href="#1-构建部分匹配表（next数组）：" class="headerlink" title="1.构建部分匹配表（next数组）："></a>1.<strong>构建部分匹配表（next数组）</strong>：</h3><p><strong>前缀：</strong> 模式字符串的前缀是指从字符串的开头开始的连续子串，但不包括最后一个字符。<br><strong>后缀：</strong> 模式字符串的后缀是指从字符串的结尾开始的连续子串，但不包括第一个字符。<br><strong>部分匹配值：</strong> 前缀和后缀的最长公共元素的长度。<br>例如，模式字符串”ABABC”的前缀有”A”, “AB”, “ABA”, “ABAB”，后缀有”C”, “BC”, “ABC”, “BABC”，最长公共元素的长度为2，因此”ABABC”的部分匹配值为2。</p><p><strong>next 数组的本质，其实就是寻找子串中相同前后缀的长度，并且一定是最长的前后缀。</strong><br>例如，模式字符串”ABABC”的next数组为[-1, 0, 0, 1, 2]，其中next[i]表示模式字符串的前i个字符中，最长的相同前后缀的长度。</p><h4 id="next-数组的构建过程："><a href="#next-数组的构建过程：" class="headerlink" title="next 数组的构建过程："></a><strong>next 数组的构建过程：</strong></h4><p>定义两个指针i和j，j代表前缀的结束位置和子串的最长相等前后缀的长度，i代表后缀的结束位置。  </p><p>j初始值为0，i初始值为1,next[0]初始值为0。  </p><ul><li><p>当模式字符串的第i个字符和第j个字符相等时，说明找到了一个更长的相同前后缀，j++;next[i] &#x3D; j;i++;</p></li><li><p>当模式字符串的第i个字符和第j个字符不相等时，说明当前的相同前后缀长度不能扩展，需要回退到前一个位置的相同前后缀长度。这可以通过将j回退到next[j-1]的位置来实现。(可能需要回退多次，直到j为0或当前字符匹配)，若j回退到0仍不匹配，说明当前字符与前缀的第一个字符也不匹配，next[i] &#x3D; 0;i++;</p></li></ul><p>初始时<br><img src="/../assets/images/KMP/KMP_9.png" alt="KMP算法"></p><p>j为0且当前字符不匹配时，next[i] &#x3D; 0;i++;<br><img src="/../assets/images/KMP/KMP_10.png" alt="KMP算法"></p><p>当前字符匹配时，j++;next[i] &#x3D; j;i++;<br><img src="/../assets/images/KMP/KMP_11.png" alt="KMP算法"><br><img src="/../assets/images/KMP/KMP_12.png" alt="KMP算法"></p><p>字符不匹配时，j回退到next[j-1]的位置，直到j为0或当前字符匹配。<br><img src="/../assets/images/KMP/KMP_13.png" alt="KMP算法"><br><img src="/../assets/images/KMP/KMP_14.png" alt="KMP算法"></p><h4 id="构建next数组的伪代码："><a href="#构建next数组的伪代码：" class="headerlink" title="构建next数组的伪代码："></a><strong>构建next数组的伪代码：</strong></h4><p>j,i,next[0]有两种初始化情况:</p><ul><li>j&#x3D;0,i&#x3D;1,next[0]&#x3D;0,更易理解；</li><li>j&#x3D;-1,i&#x3D;0,next[0]&#x3D;-1,更方便计算next数组；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 构建next数组 (next[0] = 0)</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buildNext</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; pattern)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = pattern.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">next</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// 初始化为0</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, i = <span class="hljs-number">1</span>; <span class="hljs-comment">// j初始化为0，i初始化为1</span><br>    <br>    <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (pattern[i] == pattern[j]) &#123;<br>            j++; <span class="hljs-comment">// 找到匹配，j增加</span><br>            next[i] = j; <span class="hljs-comment">// 设置next值</span><br>            i++; <span class="hljs-comment">// i向后移动</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>) &#123;<br>                j = next[j - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 回退j到前一个位置的next值</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                next[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">// j为0时，无法回退，设置next为0</span><br>                i++; <span class="hljs-comment">// i向后移动</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 构建next数组 (next[0] = -1)</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">buildNext</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; pattern)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = pattern.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">next</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt; n - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || pattern[i] == pattern[j]) &#123;<br>            i++;<br>            j++;<br>            next[i] = j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j = next[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-进行字符串匹配："><a href="#2-进行字符串匹配：" class="headerlink" title="2. 进行字符串匹配："></a>2. <strong>进行字符串匹配</strong>：</h3><pre><code class="hljs"> - 初始化两个指针i和j，分别指向主字符串和模式字符串的第一个字符。 - 当j为-1时，或者当前字符匹配时，i和j都向右移动一位。 - 当当前字符不匹配时，j回退到next[j]的位置，直到j为-1或当前字符匹配。 - 如果j移动到了模式字符串的末尾，说明匹配成功，返回匹配的起始位置。 - 否则，继续匹配。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//KMP搜索算法</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">kmpSearch</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; text, <span class="hljs-type">const</span> string&amp; pattern, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; next)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; matches;<br>    <span class="hljs-type">int</span> n = text.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> m = pattern.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || text[i] == pattern[j]) &#123;<br>            i++;<br>            j++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j = next[j];<br>        &#125;<br>        <br>        <span class="hljs-comment">// 找到完整匹配</span><br>        <span class="hljs-keyword">if</span> (j == m) &#123;<br>            matches.<span class="hljs-built_in">push_back</span>(i - j);<br>            <span class="hljs-comment">// 找到匹配后，模式串可能还有重叠部分可以继续匹配,继续寻找下一个匹配</span><br>            <span class="hljs-comment">//因为当前匹配的末尾部分可能包含下一个匹配的开头部分，所以需要回退到前一个位置的next值</span><br>            j = next[j - <span class="hljs-number">1</span>];  <span class="hljs-comment">// 回退到前一个位置</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> matches;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="KMP算法实现"><a href="#KMP算法实现" class="headerlink" title="KMP算法实现"></a>KMP算法实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KMP</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    string pattern;<br>    vector&lt;<span class="hljs-type">int</span>&gt; next;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，预计算next数组</span><br>    <span class="hljs-built_in">KMP</span>(<span class="hljs-type">const</span> string&amp; pat) : <span class="hljs-built_in">pattern</span>(pat) &#123;<br>        <span class="hljs-built_in">buildNext</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 构建next数组</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = pattern.<span class="hljs-built_in">length</span>();<br>        next.<span class="hljs-built_in">resize</span>(n, <span class="hljs-number">-1</span>);<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (i &lt; n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || pattern[i] == pattern[j]) &#123;<br>                i++;<br>                j++;<br>                <br>                <span class="hljs-comment">// 优化：如果回退后字符相同，则继续回退</span><br>                <span class="hljs-comment">//核心思想：避免已知必然失败的比较，直接跳转到更有可能成功的位置,这种优化在处理包含大量重复字符的模式串时效果尤其明显！</span><br>                <span class="hljs-keyword">if</span> (pattern[i] != pattern[j]) &#123;<br>                    next[i] = j;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    next[i] = next[j];<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 搜索所有匹配位置</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; text)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; matches;<br>        <span class="hljs-type">int</span> n = text.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> m = pattern.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || text[i] == pattern[j]) &#123;<br>                i++;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (j == m) &#123;<br>                matches.<span class="hljs-built_in">push_back</span>(i - j);<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matches;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 搜索第一个匹配位置</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchFirst</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; text)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = text.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> m = pattern.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || text[i] == pattern[j]) &#123;<br>                i++;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (j == m) &#123;<br>                <span class="hljs-keyword">return</span> i - j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 未找到</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 打印next数组</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printNext</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Pattern: &quot;</span> &lt;&lt; pattern &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Next array: [&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; next.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            cout &lt;&lt; next[i];<br>            <span class="hljs-keyword">if</span> (i &lt; next.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;, &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;]&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 测试函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testKMP</span><span class="hljs-params">()</span> </span>&#123;<br>    string text = <span class="hljs-string">&quot;ABABDABACDABABCABAB&quot;</span>;<br>    string pattern = <span class="hljs-string">&quot;ABABC&quot;</span>;<br>    <br>    <span class="hljs-comment">// 创建KMP对象</span><br>    <span class="hljs-function">KMP <span class="hljs-title">kmp</span><span class="hljs-params">(pattern)</span></span>;<br>    <br>    <span class="hljs-comment">// 打印信息</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Text: &quot;</span> &lt;&lt; text &lt;&lt; endl;<br>    kmp.<span class="hljs-built_in">printNext</span>();<br>    <br>    <span class="hljs-comment">// 搜索所有匹配</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; matches = kmp.<span class="hljs-built_in">search</span>(text);<br>    cout &lt;&lt; <span class="hljs-string">&quot;所有匹配位置: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> pos : matches) &#123;<br>        cout &lt;&lt; pos &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-comment">// 搜索第一个匹配</span><br>    <span class="hljs-type">int</span> firstMatch = kmp.<span class="hljs-built_in">searchFirst</span>(text);<br>    cout &lt;&lt; <span class="hljs-string">&quot;第一个匹配位置: &quot;</span> &lt;&lt; firstMatch &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">testKMP</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>KMP算法是一种高效的字符串匹配算法，通过利用已经匹配过的信息，避免重复匹配，从而提高匹配效率。<br>在实际应用中，KMP算法被广泛用于字符串匹配、文本编辑器、编译器等领域。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>字符串匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2025/08/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/08/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>欢迎来到我的博客！这是我发布的第一篇文章。在这里，我将分享我的学习经历、技术见解以及生活点滴。<br>希望你能在这里找到有价值的内容，也欢迎你留下评论和反馈。<br>我想在此简要叙述一下此博客的搭建过程。</p><h2 id="博客搭建过程"><a href="#博客搭建过程" class="headerlink" title="博客搭建过程"></a>博客搭建过程</h2><h3 id="1-选择平台"><a href="#1-选择平台" class="headerlink" title="1. 选择平台"></a>1. <strong>选择平台</strong></h3><p>我选择了Hexo作为我的博客平台，因为它轻量且易于使用。</p><h3 id="2-安装Hexo："><a href="#2-安装Hexo：" class="headerlink" title="2. 安装Hexo："></a>2. <strong>安装Hexo</strong>：</h3><p>我按照官方文档安装了Hexo，并创建了一个新的博客项目。</p><ul><li><strong>下载node.js</strong>：Hexo依赖于Node.js，因此我需要先安装Node.js。我从官方网站下载了最新版本的Node.js，并按照安装说明进行安装。</li><li><strong>安装Hexo</strong>：安装完成后，我使用npm安装Hexo命令行工具。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v // 检查node.js版本<br>$ npm -v  // 检查npm版本<br></code></pre></td></tr></table></figure></li><li><strong>更换镜像源</strong>：为了加快安装速度，我更换了npm的镜像源为淘宝镜像。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure></li><li><strong>安装hexo</strong>: 安装完成后，我使用npm安装Hexo命令行工具。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo -v // 检查hexo版本<br></code></pre></td></tr></table></figure></li><li><strong>创建博客项目</strong>：我使用Hexo命令行工具创建了一个新的博客项目。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init my-blog // 创建博客项目<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> my-blog // 进入博客项目目录<br>$ npm install // 安装依赖<br>$ <span class="hljs-built_in">cd</span> .. // 返回上一级目录<br>$ <span class="hljs-built_in">dir</span> // 查看目录结构<br>$ hexo new <span class="hljs-string">&quot;我的第一篇博客&quot;</span> // 创建新的博客文章<br>$ hexo s // 启动本地服务器<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-选择主题："><a href="#3-选择主题：" class="headerlink" title="3. 选择主题："></a>3. <strong>选择主题</strong>：</h3><p>我浏览了多个主题，最终选择了一个简洁而美观的主题。</p><ul><li><strong>选择主题</strong>：选择心仪的主题并克隆到本地themes目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/hexojs/hexo-theme-landscape.git themes/landscape // 克隆主题到本地themes目录<br></code></pre></td></tr></table></figure></li><li><strong>配置主题</strong>：我修改了博客项目的配置文件，将主题设置为landscape。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim _config.yml // 打开配置文件<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span> <span class="hljs-string">//</span> <span class="hljs-string">设置主题为landscape</span><br></code></pre></td></tr></table></figure></li><li><strong>重启服务器</strong>：修改配置文件后，我需要重启本地服务器才能生效。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s // 重启本地服务器<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-配置博客："><a href="#4-配置博客：" class="headerlink" title="4. 配置博客："></a>4. <strong>配置博客</strong>：</h3><p>我修改了配置文件，添加了必要的信息，如博客标题、作者、描述等。</p><ul><li><strong>修改配置文件</strong>：我修改了博客项目的配置文件，添加了必要的信息，如博客标题、作者、描述等。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim _config.yml // 打开配置文件<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">我的博客</span> <span class="hljs-string">//</span> <span class="hljs-string">设置博客标题</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">我的姓名</span> <span class="hljs-string">//</span> <span class="hljs-string">设置作者姓名</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">分享技术、生活经验的个人博客</span> <span class="hljs-string">//</span> <span class="hljs-string">设置博客描述</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-撰写内容："><a href="#5-撰写内容：" class="headerlink" title="5. 撰写内容："></a>5. <strong>撰写内容</strong>：</h3><p>我开始撰写我的第一篇博客文章，并使用Markdown格式进行排版。 我详细描述了我在学习过程中的经验、遇到的问题以及解决方法。</p><ul><li><strong>创建文章文件</strong>：我在博客项目的source&#x2F;_posts目录下创建了一个新的Markdown文件，文件名就是我的第一篇博客的标题。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;我的第一篇博客&quot;</span> // 创建新的博客文章<br></code></pre></td></tr></table></figure></li><li><strong>编写文章内容</strong>：我在文章文件中编写了我的第一篇博客的内容。我使用Markdown格式进行排版，添加了标题、段落、列表、代码块、图片等元素。<br>  这是Markdown语法链接：<a href="https://markdown.com.cn/">Markdown语法</a></li></ul><h3 id="6-发布博客："><a href="#6-发布博客：" class="headerlink" title="6. 发布博客："></a>6. <strong>发布博客</strong>：</h3><p>我使用Hexo的生成和部署命令，将我的博客发布到GitHub Pages上。</p><ul><li><strong>申请GitHub Pages</strong>：我需要先在GitHub上创建一个新的仓库，用于存储我的博客项目。<ol><li>登录GitHub账号，点击“New repository”按钮。</li><li>输入仓库名称，需注意的是，仓库名称必须与你的GitHub用户名相同且以“.github.io”结尾，才能将博客发布到GitHub Pages上。</li><li>点击“Create repository”按钮，创建新的仓库。</li></ol></li><li><strong>配置Hexo</strong>：我需要在博客项目的配置文件中添加一些信息，以告诉Hexo将博客发布到GitHub Pages上。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim _config.yml // 打开配置文件<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/your-username/your-username.github.io.git</span> <span class="hljs-string">//</span> <span class="hljs-string">替换为你的仓库URL</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-string">//</span> <span class="hljs-string">替换为你的分支名称</span><br></code></pre></td></tr></table></figure></li><li><strong>清理缓存</strong>：在发布博客之前，我需要清理Hexo的缓存，以确保最新的配置生效。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean // 清理缓存<br></code></pre></td></tr></table></figure></li><li><strong>生成静态文件</strong>：我使用Hexo的生成命令，将博客项目中的Markdown文件转换为静态HTML文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g // 生成静态文件<br></code></pre></td></tr></table></figure></li><li><strong>部署到GitHub Pages</strong>：我使用Hexo的部署命令，将生成的静态文件部署到GitHub Pages上。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d // 部署到GitHub Pages<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-持续更新："><a href="#7-持续更新：" class="headerlink" title="7. 持续更新："></a>7. <strong>持续更新</strong>：</h3><p>我计划定期更新博客，分享更多有趣的技术内容、生活经验以及个人思考。 </p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我希望我的第一篇博客能够对读者们有所帮助，也希望能鼓励他们继续分享知识和经验。<br>如果有任何问题或建议，欢迎在评论区留言。<br>再次感谢你阅读我的博客！<br><img src="/../assets/images/%E5%A3%81%E7%BA%B8.jpg" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/01/hello-world/"/>
    <url>/2025/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
